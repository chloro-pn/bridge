benchmark/bench_mark.cc:94:44: style: Parameter 'state' can be declared with const. However it seems that 'BM_Rapidjson' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void BM_Rapidjson(benchmark::State& state) {
                                           ^
benchmark/bench_mark.cc:168:11: note: You might need to cast the function pointer here
BENCHMARK(BM_Rapidjson);
          ^
benchmark/bench_mark.cc:94:44: note: Parameter 'state' can be declared with const
static void BM_Rapidjson(benchmark::State& state) {
                                           ^
benchmark/bench_mark.cc:98:50: style: Parameter 'state' can be declared with const. However it seems that 'BM_Rapidjson_Parse' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void BM_Rapidjson_Parse(benchmark::State& state) {
                                                 ^
benchmark/bench_mark.cc:169:11: note: You might need to cast the function pointer here
BENCHMARK(BM_Rapidjson_Parse);
          ^
benchmark/bench_mark.cc:98:50: note: Parameter 'state' can be declared with const
static void BM_Rapidjson_Parse(benchmark::State& state) {
                                                 ^
benchmark/bench_mark.cc:152:41: style: Parameter 'state' can be declared with const. However it seems that 'BM_Bridge' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void BM_Bridge(benchmark::State& state) {
                                        ^
benchmark/bench_mark.cc:170:11: note: You might need to cast the function pointer here
BENCHMARK(BM_Bridge);
          ^
benchmark/bench_mark.cc:152:41: note: Parameter 'state' can be declared with const
static void BM_Bridge(benchmark::State& state) {
                                        ^
benchmark/bench_mark.cc:156:49: style: Parameter 'state' can be declared with const. However it seems that 'BM_Bridge_Replace' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void BM_Bridge_Replace(benchmark::State& state) {
                                                ^
benchmark/bench_mark.cc:173:11: note: You might need to cast the function pointer here
BENCHMARK(BM_Bridge_Replace);
          ^
benchmark/bench_mark.cc:156:49: note: Parameter 'state' can be declared with const
static void BM_Bridge_Replace(benchmark::State& state) {
                                                ^
benchmark/bench_mark.cc:160:47: style: Parameter 'state' can be declared with const. However it seems that 'BM_Bridge_Parse' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void BM_Bridge_Parse(benchmark::State& state) {
                                              ^
benchmark/bench_mark.cc:171:11: note: You might need to cast the function pointer here
BENCHMARK(BM_Bridge_Parse);
          ^
benchmark/bench_mark.cc:160:47: note: Parameter 'state' can be declared with const
static void BM_Bridge_Parse(benchmark::State& state) {
                                              ^
benchmark/bench_mark.cc:164:55: style: Parameter 'state' can be declared with const. However it seems that 'BM_Bridge_Parse_Replace' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void BM_Bridge_Parse_Replace(benchmark::State& state) {
                                                      ^
benchmark/bench_mark.cc:172:11: note: You might need to cast the function pointer here
BENCHMARK(BM_Bridge_Parse_Replace);
          ^
benchmark/bench_mark.cc:164:55: note: Parameter 'state' can be declared with const
static void BM_Bridge_Parse_Replace(benchmark::State& state) {
                                                      ^
benchmark/bench_mark.cc:141:13: style: Variable 'root' is assigned a value that is never used. [unreadVariable]
  auto root = bridge::Parse(GetBridgeStr(), po);
            ^
benchmark/bench_mark.cc:148:13: style: Variable 'root' is assigned a value that is never used. [unreadVariable]
  auto root = bridge::Parse(GetBridgeReplaceStr(), po);
            ^
nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingInclude]

